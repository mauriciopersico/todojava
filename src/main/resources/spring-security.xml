<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-4.0.xsd">

<!-- 	<http auto-config="true" use-expressions="true"> -->
<!-- 		<intercept-url pattern="/*" access="hasRole('ROLE_USER')" /> -->
<!-- 	</http> -->

<!-- 	<authentication-manager> -->
<!-- 	  <authentication-provider> -->
<!-- 	    <user-service> -->
<!-- 		<user name="mkyong" password="123456" authorities="ROLE_USER" /> -->
<!-- 	    </user-service> -->
<!-- 	  </authentication-provider> -->
<!-- 	</authentication-manager> -->
	
	<beans:bean id="basicAuthEntryPointToAvoidPopUp" class="com.example.controller.BasicAuth">
		<constructor-arg value="RealmName" />
	</beans:bean>
	
	<bean id="csrfTokenRepository" class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository">
    	<property name="headerName" value="X-XSRF-TOKEN" />
	</bean>
	
	<beans:bean id="csrfHeaderFilter" class="com.example.controller.CsrfHeaderFilter"></beans:bean>
	
	<security:http auto-config="true">
<!-- 		<security:intercept-url pattern="/*" access="hasRole('ROLE_USER')"/> -->
		<security:intercept-url pattern="index.html" access="permitAll"/>
		<security:intercept-url pattern="/ws/*" access="permitAll"/>
		<security:intercept-url pattern="/api/people/retrieve-all"  access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/api/people/create"  access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/api/products/retrieve-all"  access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/api/products/save"  access="hasRole('ROLE_USER')"/>
		<security:http-basic entry-point-ref="basicAuthEntryPointToAvoidPopUp"/>
		<security:csrf disabled="true"/>
<!-- 		<security:csrf token-repository-ref="csrfTokenRepository"/> -->
<!-- 		<security:custom-filter ref="csrfHeaderFilter" after="CSRF_FILTER"/> -->
		<security:logout logout-url="/api/login/logout"/>
<!-- 		<security:custom-filter ref="csrfHeaderFilter" after="BASIC_AUTH_FILTER"/> -->
<!-- 		<security:intercept-url pattern="/api/people/retrieve-all"  access="hasRole('ROLE_USER')"/> -->
<!-- 		<security:intercept-url pattern="/api/products/retrieve-all"  access="hasRole('ROLE_USER')"/> -->
	</security:http>
	

	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	 <security:authentication-manager>
	         <security:authentication-provider user-service-ref="customUserDetailsService">
<!-- 	         <security:authentication-provider> -->
<!-- 	         	<security:user-service> -->
<!-- 	         		<security:user name="mkyong" password="123456" authorities="ROLE_USER"/> -->
<!-- 	         	</security:user-service> -->
<!--           <security:password-encoder ref="passwordEncoder"/> -->
	         </security:authentication-provider>
	 </security:authentication-manager>

	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
 	<bean id="customUserDetailsService" class="com.example.service.PersonDetailService"/>
  
</beans>